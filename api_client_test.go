package main

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const (
	username   = "mauleyzaola"
	repository = "garbage"
	labelName  = "beer-is-good"
)

func createClient(t *testing.T) *APIClient {
	apiClient, err := NewAPIClient(nil)
	require.NoError(t, err)
	require.NotEmpty(t, apiClient)
	return apiClient
}

func TestAPIClient_All(t *testing.T) {
	apiClient := createClient(t)
	labels, err := apiClient.LabelList(username, repository)
	require.NoError(t, err)

	// remove all labels
	for _, v := range labels {
		err = apiClient.LabelDelete(username, repository, v.Name)
		require.NoError(t, err)
	}

	// create one label
	label := Label{
		Name:        labelName,
		Color:       "ff3333",
		Description: "anything goes",
	}
	err = apiClient.LabelPost(username, repository, &label)
	require.NoError(t, err)
	require.NotEmpty(t, label)
	require.NotEmpty(t, label.Id, "id should be generated by the GH API")

	// check only the last label is present
	labels, err = apiClient.LabelList(username, repository)
	require.NoError(t, err)
	require.Len(t, labels, 1, "only the last label should be present")
}

func TestAPIClient_List(t *testing.T) {
	t.Skip()
	apiClient := createClient(t)
	labels, err := apiClient.LabelList(username, repository)
	if err != nil {
		t.Error(err)
		return
	}
	require.NoError(t, err)
	assert.NotEmpty(t, labels)

	for _, v := range labels {
		t.Log(v.Name)
	}
}

func TestAPIClient_LabelPost(t *testing.T) {
	t.Skip()
	apiClient := createClient(t)
	label := &Label{
		Name:        labelName,
		Color:       "ff3333",
		Description: "test label description",
	}
	err := apiClient.LabelPost(username, repository, label)
	require.NoError(t, err)
	t.Log(label)
}

func TestAPIClient_LabelDelete(t *testing.T) {
	t.Skip()
	apiClient := createClient(t)
	err := apiClient.LabelDelete(username, repository, labelName)
	require.NoError(t, err)
}
